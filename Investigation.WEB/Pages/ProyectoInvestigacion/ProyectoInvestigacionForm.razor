@using Investigation.Shared.Entities
@using Investigation.WEB.Repositories
@using Investigation.WEB.Shared
@inject IRepository repository
@inject SweetAlertService SweetAlertService

<h3>ProyectoInvestigacionForm</h3>

<EditForm Model="proyectoInvestigacion" OnSubmit="OnSubmit" ReturnAction="Return">
    <DataAnnotationsValidator />


    <div class="mb-3">
        <label>Nombre_Proyecto:</label>
        <div>
            <InputText width="10" @bind-Value="proyectoInvestigacion.Nombre_Proyecto" />
            <ValidationMessage For="@(()=>proyectoInvestigacion.Nombre_Proyecto)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Descripcion:</label>
        <div>
            <InputText width="10" @bind-Value="proyectoInvestigacion.Descripcion" />
            <ValidationMessage For="@(()=>proyectoInvestigacion.Descripcion)" />
        </div>
    </div>


    <div class="mb-3">
        <label>Fecha de Inicio:</label>
        <div>
            <InputDate width="10" @bind-Value="proyectoInvestigacion.FechaInicio" />
            <ValidationMessage For="@(()=>proyectoInvestigacion.FechaInicio)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha de Finalizacion:</label>
        <div>
            <InputDate width="10" @bind-Value="proyectoInvestigacion.FechaFinal" />
            <ValidationMessage For="@(()=>proyectoInvestigacion.FechaFinal)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-info" type="reset">Limpiar</button>
    <button class="btn btn-success" onclick="ReturnAction">Regresar</button>

</EditForm>

@code {

    private EditContext editContext = null!;
    protected override void OnInitialized()
    {
        editContext = new(proyectoInvestigacion);
    }

    [EditorRequired]
    [Parameter]
    public ProyectoInvestigacion proyectoInvestigacion { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


    public bool FormPostedSuccessfully { get; set; }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var resultado = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}