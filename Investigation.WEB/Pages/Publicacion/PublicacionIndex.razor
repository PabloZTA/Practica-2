@page "/Publicaciones"
@using Investigation.Shared.Entities
@using Investigation.WEB.Repositories
@using Investigation.WEB.Shared
@inject IRepository repository
@inject SweetAlertService SweetAlertService
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Publicaciones
            <a class="btn btn-primary btn-sm float-end" href="/Publicaciones/create"><i class="bi bi-plus-circle" />Nueva Publicacion</a>

        </span>
</div>

    <div class="card-body">
<GenericList MyList="Publicaciones">

    <Body>
        <div class="align-items-center">
        </div>


        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Publicaciones</th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Publicaciones!)
                {
                    <tr>
                        <td>
                            <a href="/Publicaciones/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                            <button @onclick=@(() => DeleteAsync(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill" /> Borrar</button>
                        </td>

                                <td>@item.Titulo</td>
                                <td>@item.Autor</td>
                                <td>@item.FechaPublicacion</td>


                        <td>
                            <a class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger">Borrar</button>
                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>
    </div>
</div>
@code {
    public List<Publicacion>?  Publicaciones { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Publicacion>>("api/Publicaciones");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Publicaciones = responseHttp.Response;
    }



    private async Task DeleteAsync(Publicacion publicacion)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar el owner: {publicacion.Titulo}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Publicacion>($"api/Publicaciones/{publicacion.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("Publicaciones");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await SweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
